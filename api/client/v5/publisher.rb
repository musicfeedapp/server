module Api
  module Client
    module V5

      class Publisher < Grape::API
        version 'v5', using: :path
        format :json

        SuccessResponse = {}

        include RequestAuth

        namespace 'publisher' do
          params do
            optional :url, type: String, desc: "Working as url recognition for the different music providers"
            optional :artist, type: String, desc: "Artist or other attributes to find song"
            optional :track, type: String, desc: "Track name to find directly in the different sources"
          end
          get 'find', rabl: 'v1/publisher/timeline' do
            @timeline = TimelinesRecognize.do(params)

            if @timeline.valid?
              timeline = Timeline.where("timelines.youtube_id = ? OR timelines.youtube_link = ? OR timelines.link = ?", @timeline.youtube_id, @timeline.youtube_link, @timeline.link).first

              if timeline
                @timeline = timeline
                @timeline.custom_id = timeline.id
                @timeline.is_posted = TimelinePublisher.where(user_identifier: current_user.facebook_id, timeline_id: timeline.id).exists?
              else
                @timeline.custom_id = SecureRandom.uuid
                @timeline.is_posted = false
              end

              Cache.set(@timeline.custom_id, Marshal.dump(@timeline), expires_in: 1.hour)

              @timeline
            else
              throw :error, status: 404, message: ErrorSerializer.serialize(not_found_timeline: "We can't find record by requested params.")
            end

            # We should have now this record in the database and lets respond with it.
            @timeline
          end

          params do
            requires :id, type: String, desc: 'autogenerated timeline id to use later to store timeline'
          end
          post '/publish/:id' do
            @timeline = PublisherTimeline.fetch(params[:id])

            success, @timeline = PublisherTimeline.find_or_create_for(current_user, @timeline, disable_playlist_event: false, eventable_id: :reposted)

            if success
              PushNotifications::Worker.perform_async(:track_posted, [current_user.id, @timeline.id])

              SuccessResponse
            else
              throw :error, status: 400, message: ErrorSerializer.serialize(@timeline.errors)
            end
          end
        end # namespace :publisher
      end
    end
  end
end
